#!/bin/bash

# Script de nettoyage et rÃ©installation complÃ¨te

# Configuration du logging
LOG_FILE="clean_install.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Fonction de logging
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOG_FILE"
}

# Fonction pour gÃ©rer les erreurs
handle_error() {
    log_message "ERREUR: $1"
    log_message "Le script s'est arrÃªtÃ© Ã  cause d'une erreur."
    log_message "Consultez le fichier $LOG_FILE pour plus de dÃ©tails."
    echo ""
    echo "Appuyez sur une touche pour fermer cette fenÃªtre..."
    read -n 1 -s
    exit 1
}

# Rediriger les erreurs vers le log
exec 2>> "$LOG_FILE"

# DÃ©marrer le logging
log_message "=== DÃ©but du nettoyage et rÃ©installation ==="

echo "ğŸ§¹ Nettoyage et rÃ©installation complÃ¨te de l'environnement virtuel"
echo ""

# Ã‰tape 1 : Nettoyage
log_message "Ã‰tape 1 : Nettoyage de l'environnement existant..."
echo "Suppression de l'environnement virtuel existant..."

if [ -d "venv" ]; then
    if rm -rf venv 2>&1 | tee -a "$LOG_FILE"; then
        log_message "Environnement virtuel supprimÃ© avec succÃ¨s"
    else
        log_message "ATTENTION: Impossible de supprimer complÃ¨tement l'environnement virtuel"
    fi
else
    log_message "Aucun environnement virtuel existant Ã  supprimer"
fi

# Supprimer les fichiers de marquage
if [ -f "venv/.dependencies_installed" ]; then
    rm -f venv/.dependencies_installed
    log_message "Fichier de marquage supprimÃ©"
fi

# Ã‰tape 2 : Installation des prÃ©requis systÃ¨me
log_message "Ã‰tape 2 : Installation des prÃ©requis systÃ¨me..."
echo "Installation des prÃ©requis systÃ¨me..."

if command -v apt &> /dev/null; then
    # Mettre Ã  jour les paquets
    log_message "Mise Ã  jour des paquets systÃ¨me..."
    if ! sudo apt update 2>&1 | tee -a "$LOG_FILE"; then
        handle_error "Ã‰chec de la mise Ã  jour des paquets"
    fi
    
    # Installer les prÃ©requis Python
    log_message "Installation des prÃ©requis Python..."
    if ! sudo apt install -y python3 python3-pip python3-full 2>&1 | tee -a "$LOG_FILE"; then
        handle_error "Ã‰chec de l'installation des prÃ©requis Python"
    fi
    
    # DÃ©tecter la version de Python et installer le bon package venv
    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
    log_message "Version Python dÃ©tectÃ©e: $PYTHON_VERSION"
    
    # Essayer d'abord la version spÃ©cifique, puis la version gÃ©nÃ©rique
    log_message "Installation de python3-venv..."
    if ! sudo apt install -y "python3-${PYTHON_VERSION}-venv" 2>&1 | tee -a "$LOG_FILE"; then
        log_message "Ã‰chec avec la version spÃ©cifique, tentative avec python3-venv..."
        if ! sudo apt install -y python3-venv 2>&1 | tee -a "$LOG_FILE"; then
            handle_error "Impossible d'installer python3-venv"
        fi
    fi
    
    # Installer les dÃ©pendances de compilation
    log_message "Installation des dÃ©pendances de compilation..."
    if ! sudo apt install -y \
        python3-dev \
        build-essential \
        libxml2-dev \
        libxslt1-dev \
        libjpeg-dev \
        libpng-dev \
        libfreetype6-dev \
        liblcms2-dev \
        libwebp-dev \
        libtiff5-dev \
        libopenjp2-7-dev \
        libharfbuzz-dev \
        libfribidi-dev \
        libxcb1-dev 2>&1 | tee -a "$LOG_FILE"; then
        handle_error "Ã‰chec de l'installation des dÃ©pendances de compilation"
    fi
else
    handle_error "apt n'est pas disponible. Ce script est destinÃ© aux systÃ¨mes Ubuntu/Debian"
fi

# Ã‰tape 3 : CrÃ©ation de l'environnement virtuel
log_message "Ã‰tape 3 : CrÃ©ation de l'environnement virtuel..."
echo "CrÃ©ation de l'environnement virtuel..."

# VÃ©rifier que python3-venv est disponible
if ! python3 -c "import venv" 2>/dev/null; then
    handle_error "python3-venv n'est toujours pas disponible aprÃ¨s installation"
fi

# CrÃ©er l'environnement virtuel
CREATE_OUTPUT=$(python3 -m venv venv 2>&1)
CREATE_EXIT_CODE=$?

log_message "Sortie de la crÃ©ation: $CREATE_OUTPUT"

if [ $CREATE_EXIT_CODE -ne 0 ]; then
    handle_error "La crÃ©ation de l'environnement virtuel a Ã©chouÃ©. Sortie: $CREATE_OUTPUT"
fi

# VÃ©rifier que l'environnement a Ã©tÃ© crÃ©Ã© correctement
if [ ! -d "venv/bin" ] || [ ! -f "venv/bin/activate" ]; then
    handle_error "L'environnement virtuel n'a pas Ã©tÃ© crÃ©Ã© correctement"
fi

log_message "Environnement virtuel crÃ©Ã© avec succÃ¨s"

# Ã‰tape 4 : Activation et installation des dÃ©pendances
log_message "Ã‰tape 4 : Activation et installation des dÃ©pendances..."
echo "Activation de l'environnement virtuel et installation des dÃ©pendances..."

# Activer l'environnement virtuel
source venv/bin/activate
if [ -z "$VIRTUAL_ENV" ]; then
    handle_error "L'activation de l'environnement virtuel a Ã©chouÃ©"
fi

log_message "Environnement virtuel activÃ©: $VIRTUAL_ENV"

# Mettre Ã  jour pip
log_message "Mise Ã  jour de pip..."
if ! pip install --upgrade pip 2>&1 | tee -a "$LOG_FILE"; then
    log_message "ATTENTION: Ã‰chec de la mise Ã  jour de pip, continuation..."
fi

# Installer les outils de build
log_message "Installation des outils de build..."
if ! pip install wheel setuptools --upgrade 2>&1 | tee -a "$LOG_FILE"; then
    log_message "ATTENTION: Ã‰chec de l'installation des outils de build, continuation..."
fi

# Installer les dÃ©pendances
log_message "Installation des dÃ©pendances Python..."
if pip install -r requirements.txt 2>&1 | tee -a "$LOG_FILE"; then
    log_message "DÃ©pendances installÃ©es avec succÃ¨s"
else
    log_message "Ã‰chec de l'installation en lot, tentative package par package..."
    
    # Installation package par package
    packages=(
        "selenium==4.18.1"
        "webdriver-manager==4.0.1"
        "Pillow==9.5.0"
        "markdown==3.5.2"
        "beautifulsoup4==4.12.3"
        "requests==2.31.0"
        "lxml==4.9.3"
        "pdfkit==1.0.0"
    )
    
    success=true
    for package in "${packages[@]}"; do
        log_message "Installation de $package..."
        if pip install "$package" 2>&1 | tee -a "$LOG_FILE"; then
            log_message "âœ“ $package installÃ© avec succÃ¨s"
        else
            log_message "âœ— Ã‰chec de l'installation de $package"
            success=false
        fi
    done
    
    if [ "$success" = false ]; then
        handle_error "Certaines dÃ©pendances n'ont pas pu Ãªtre installÃ©es"
    fi
fi

# CrÃ©er le fichier de marquage
touch venv/.dependencies_installed

# VÃ©rification finale
log_message "VÃ©rification finale de l'installation..."
packages_check=("selenium" "webdriver-manager" "Pillow" "markdown" "beautifulsoup4" "requests" "lxml" "pdfkit")

all_installed=true
for package in "${packages_check[@]}"; do
    if pip show "$package" >/dev/null 2>&1; then
        log_message "âœ“ $package installÃ©"
    else
        log_message "âœ— $package non installÃ©"
        all_installed=false
    fi
done

if [ "$all_installed" = true ]; then
    log_message "=== Installation terminÃ©e avec succÃ¨s ==="
    echo ""
    echo "âœ… Installation terminÃ©e avec succÃ¨s !"
    echo "ğŸ“‹ Logs disponibles dans : $LOG_FILE"
    echo "ğŸ”§ Environnement virtuel activÃ© et prÃªt Ã  l'emploi"
    echo "ğŸšª Pour le dÃ©sactiver : deactivate"
    echo ""
    echo "Appuyez sur une touche pour continuer..."
    read -n 1 -s
else
    handle_error "Certaines dÃ©pendances n'ont pas pu Ãªtre installÃ©es. Consultez $LOG_FILE pour plus de dÃ©tails."
fi 