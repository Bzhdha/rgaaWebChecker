# Copie du ScreenReader avec algorithme hi√©rarchique optimis√©
from selenium.webdriver.common.by import By
from selenium.common.exceptions import JavascriptException
import re
import time
from collections import defaultdict
from concurrent.futures import ThreadPoolExecutor, as_completed
import math
import os
from utils.css_selector_generator import CSSSelectorGenerator

class HierarchicalScreenReader:
    def __init__(self, driver, logger):
        self.driver = driver
        self.logger = logger
        self.page_url = None
        self.csv_lines = []  # Pour stocker les lignes CSV
        self.css_generator = CSSSelectorGenerator()  # G√©n√©rateur de s√©lecteurs CSS
        self.non_conformites = {
            "images": [],
            "liens": [],
            "titres": [],
            "navigation": [],
            "roles_aria": [],
            "landmarks": [],
            "duplicate_id": []
        }
        # Cache pour les XPath
        self._xpath_cache = {}
        # Hi√©rarchie DOM optimis√©e
        self._dom_hierarchy = {}
        self._element_map = {}
        
        # Liste des r√¥les ARIA valides (extrait de la spec WAI-ARIA)
        self.ARIA_ROLES_VALIDES = set([
            'alert', 'alertdialog', 'application', 'article', 'banner', 'button', 'cell', 'checkbox', 'columnheader',
            'combobox', 'complementary', 'contentinfo', 'definition', 'dialog', 'directory', 'document', 'feed',
            'figure', 'form', 'grid', 'gridcell', 'group', 'heading', 'img', 'link', 'list', 'listbox', 'listitem',
            'log', 'main', 'marquee', 'math', 'menu', 'menubar', 'menuitem', 'menuitemcheckbox', 'menuitemradio',
            'navigation', 'none', 'note', 'option', 'presentation', 'progressbar', 'radio', 'radiogroup', 'region',
            'row', 'rowgroup', 'rowheader', 'scrollbar', 'search', 'searchbox', 'separator', 'slider', 'spinbutton',
            'status', 'switch', 'tab', 'table', 'tablist', 'tabpanel', 'term', 'textbox', 'timer', 'toolbar', 'tooltip', 'tree', 'treegrid', 'treeitem'
        ])
        # Liste des r√¥les d√©pr√©ci√©s (exemple)
        self.ARIA_ROLES_DEPRECIES = set(['directory', 'marquee', 'note'])

    def set_page_url(self, url):
        self.page_url = url

    def _get_element_identifier(self, element):
        """G√©n√®re un identifiant unique pour un √©l√©ment"""
        try:
            tag = element.tag_name
            element_id = element.get_attribute('id')
            element_class = element.get_attribute('class')
            element_text = element.text[:50] if element.text else ''
            
            # Cr√©er un identifiant bas√© sur les propri√©t√©s les plus stables
            if element_id:
                return f"{tag}#{element_id}"
            elif element_text:
                return f"{tag}[text='{element_text[:30]}']"
            elif element_class:
                return f"{tag}.{element_class.split()[0]}"
            else:
                return f"{tag}[{hash(str(element))}]"
        except Exception as e:
            self.logger.warning(f"Erreur lors de la g√©n√©ration de l'identifiant: {e}")
            return f"unknown_{hash(str(element))}"

    def _build_dom_hierarchy(self):
        """Construit une hi√©rarchie DOM optimis√©e pour la g√©n√©ration de XPath"""
        self.logger.info("üîß Construction de la hi√©rarchie DOM optimis√©e...")
        start_time = time.time()
        
        # R√©cup√©rer tous les √©l√©ments en une seule requ√™te
        all_elements = self.driver.find_elements(By.XPATH, "//*")
        total_elements = len(all_elements)
        
        # Construire la hi√©rarchie avec une seule requ√™te JavaScript
        hierarchy_data = self.driver.execute_script('''
            var elements = arguments[0];
            var hierarchy = {};
            var elementMap = {};
            
            for (var i = 0; i < elements.length; i++) {
                var el = elements[i];
                var parent = el.parentElement;
                var siblings = parent ? Array.from(parent.children) : [];
                var index = siblings.indexOf(el);
                
                var elementInfo = {
                    tag: el.tagName,
                    id: el.id || null,
                    className: el.className || null,
                    text: el.textContent ? el.textContent.trim().substring(0, 50) : '',
                    parentTag: parent ? parent.tagName : null,
                    parentId: parent ? parent.id : null,
                    siblingIndex: index,
                    siblingCount: siblings.length,
                    siblingTags: siblings.map(s => s.tagName),
                    isVisible: el.offsetWidth > 0 && el.offsetHeight > 0,
                    isEnabled: !el.disabled,
                    isFocusable: el.tabIndex >= 0 || ['A', 'BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'].includes(el.tagName)
                };
                
                // Cr√©er un identifiant unique
                var identifier = el.id ? el.tagName + '#' + el.id : 
                                el.textContent ? el.tagName + '[text=\'' + el.textContent.trim().substring(0, 30) + '\']' :
                                el.className ? el.tagName + '.' + el.className.split(' ')[0] :
                                el.tagName + '[' + i + ']';
                
                hierarchy[identifier] = elementInfo;
                elementMap[identifier] = el;
            }
            
            return { hierarchy: hierarchy, elementMap: elementMap };
        ''', all_elements)
        
        self._dom_hierarchy = hierarchy_data['hierarchy']
        self._element_map = hierarchy_data['elementMap']
        
        build_time = time.time() - start_time
        self.logger.info(f"‚úÖ Hi√©rarchie DOM construite: {build_time:.2f}s ({total_elements} √©l√©ments)")
        
        return self._dom_hierarchy, self._element_map

    def _get_xpath_hierarchical(self, element):
        """G√©n√®re XPath optimis√© en utilisant la hi√©rarchie DOM"""
        try:
            element_id = self._get_element_identifier(element)
            element_info = self._dom_hierarchy.get(element_id)
            
            if not element_info:
                return self._get_simple_xpath(element)
            
            # V√©rifier le cache d'abord
            cache_key = f"{element_info['tag']}:{element_info['id']}:{element_info['className']}"
            if cache_key in self._xpath_cache:
                return self._xpath_cache[cache_key]
            
            # XPath optimis√© bas√© sur la hi√©rarchie
            if element_info['id']:
                xpath = f"//*[@id='{element_info['id']}']"
            else:
                # Construire le chemin hi√©rarchique optimis√©
                path_parts = []
                current = element_info
                
                while current:
                    tag = current['tag']
                    sibling_index = current['siblingIndex']
                    sibling_count = current['siblingCount']
                    
                    # Optimisation : utiliser l'index seulement si n√©cessaire
                    if sibling_count > 1:
                        path_parts.insert(0, f"{tag}[{sibling_index + 1}]")
                    else:
                        path_parts.insert(0, tag)
                    
                    # Remonter vers le parent (simul√©)
                    if current['parentTag']:
                        current = {
                            'tag': current['parentTag'],
                            'siblingIndex': 0,  # Simplifi√© pour la performance
                            'siblingCount': 1
                        }
                    else:
                        current = None
                
                xpath = '/html/' + '/'.join(path_parts)
            
            # Mettre en cache
            self._xpath_cache[cache_key] = (xpath, [])
            return (xpath, [])
            
        except Exception as e:
            self.logger.debug(f"Erreur lors de la g√©n√©ration du XPath hi√©rarchique : {str(e)}")
            return self._get_simple_xpath(element)

    def _get_simple_xpath(self, element):
        """XPath simple et rapide en fallback"""
        try:
            element_id = element.get_attribute('id')
            if element_id:
                return (f"//*[@id='{element_id}']", [])
            
            tag = element.tag_name
            classes = element.get_attribute('class')
            if classes:
                return (f"//{tag}[contains(@class, '{classes.split()[0]}')]", [])
            
            return (f"//{tag}[{hash(str(element))}]", [])
        except:
            return ('Non disponible', [])

    def _get_element_info(self, element):
        """R√©cup√®re toutes les informations d'accessibilit√© d'un √©l√©ment (optimis√©)"""
        # Script JavaScript all√©g√© - r√©cup√®re seulement les attributs essentiels
        attrs = self.driver.execute_script('''
            var el = arguments[0];
            return {
                tag: el.tagName,
                role: el.getAttribute('role'),
                ariaLabel: el.getAttribute('aria-label'),
                ariaDescribedby: el.getAttribute('aria-describedby'),
                ariaLabelledby: el.getAttribute('aria-labelledby'),
                ariaHidden: el.getAttribute('aria-hidden'),
                ariaExpanded: el.getAttribute('aria-expanded'),
                ariaControls: el.getAttribute('aria-controls'),
                ariaLive: el.getAttribute('aria-live'),
                ariaRequired: el.getAttribute('aria-required'),
                ariaDisabled: el.getAttribute('aria-disabled'),
                ariaSelected: el.getAttribute('aria-selected'),
                ariaChecked: el.getAttribute('aria-checked'),
                ariaPressed: el.getAttribute('aria-pressed'),
                tabindex: el.getAttribute('tabindex'),
                title: el.getAttribute('title'),
                alt: el.getAttribute('alt'),
                id: el.getAttribute('id'),
                className: el.getAttribute('class'),
                text: el.textContent ? el.textContent.trim() : '',
                isVisible: el.offsetWidth > 0 && el.offsetHeight > 0,
                isEnabled: !el.disabled,
                isFocusable: el.tabIndex >= 0 || ['A', 'BUTTON', 'INPUT', 'SELECT', 'TEXTAREA'].includes(el.tagName),
                mediaPath: el.getAttribute('src') || el.getAttribute('data') || '',
                mediaType: el.tagName.toLowerCase()
            };
        ''', element)

        # Construction du dictionnaire d'informations optimis√©
        info = {
            "Type": attrs['tag'],
            "R√¥le": attrs['role'] or "non d√©fini",
            "Aria-label": attrs['ariaLabel'] or "non d√©fini",
            "Aria-describedby": attrs['ariaDescribedby'] or "non d√©fini",
            "Aria-labelledby": attrs['ariaLabelledby'] or "non d√©fini",
            "Aria-hidden": attrs['ariaHidden'] or "non d√©fini",
            "Aria-expanded": attrs['ariaExpanded'] or "non d√©fini",
            "Aria-controls": attrs['ariaControls'] or "non d√©fini",
            "Aria-live": attrs['ariaLive'] or "non d√©fini",
            "Aria-required": attrs['ariaRequired'] or "non d√©fini",
            "Aria-disabled": attrs['ariaDisabled'] or "non d√©fini",
            "Aria-selected": attrs['ariaSelected'] or "non d√©fini",
            "Aria-checked": attrs['ariaChecked'] or "non d√©fini",
            "Aria-pressed": attrs['ariaPressed'] or "non d√©fini",
            "Tabindex": attrs['tabindex'] or "non d√©fini",
            "Title": attrs['title'] or "non d√©fini",
            "Alt": attrs['alt'] or "non d√©fini",
            "Text": attrs['text'] or "non d√©fini",
            "Visible": "Oui" if attrs['isVisible'] else "Non",
            "Focusable": "Oui" if attrs['isFocusable'] else "Non",
            "Id": attrs['id'] or "non d√©fini",
            "S√©lecteur": self._get_simple_selector(element),
            "Extrait HTML": self._get_html_snippet(element),
            "MediaPath": attrs['mediaPath'] or "non d√©fini",
            "MediaType": attrs['mediaType'] or "non d√©fini"
        }
        return info

    def _get_simple_selector(self, element):
        tag = element.tag_name
        classes = element.get_attribute('class')
        if classes:
            return f"{tag}.{'.'.join(classes.split())}"
        return tag

    def _get_html_snippet(self, element):
        """G√©n√®re un extrait HTML l√©ger sans outerHTML co√ªteux"""
        try:
            tag = element.tag_name
            id_attr = element.get_attribute('id')
            class_attr = element.get_attribute('class')
            text = element.text[:50] if element.text else ''
            
            # Construire un extrait simple
            snippet = f"<{tag.lower()}"
            if id_attr:
                snippet += f' id="{id_attr}"'
            if class_attr:
                snippet += f' class="{class_attr[:30]}"'
            if text:
                snippet += f">{text[:30]}...</{tag.lower()}>"
            else:
                snippet += " />"
            
            return snippet
        except:
            return f"<{element.tag_name.lower()} />"

    def _clean_csv_field(self, value):
        """Nettoie une valeur pour l'insertion dans un CSV"""
        if value is None:
            return "non d√©fini"
        # Convertir en string si ce n'est pas d√©j√† le cas
        value = str(value)
        # Remplacer les retours √† la ligne par des espaces
        value = value.replace('\n', ' ').replace('\r', ' ')
        # Supprimer les espaces multiples
        value = ' '.join(value.split())
        # √âchapper les points-virgules
        value = value.replace(';', ',')
        return value

    def _analyze_links_hierarchical(self, links):
        """Analyse optimis√©e des liens avec hi√©rarchie DOM"""
        self.logger.info("üîó Analyse hi√©rarchique optimis√©e des liens...")
        start_time = time.time()
        
        # R√©cup√©rer tous les attributs des liens en une seule requ√™te
        batch_attrs = self.driver.execute_script('''
            var links = arguments[0];
            return links.map(function(el) {
                return {
                    text: el.textContent ? el.textContent.trim() : '',
                    ariaLabel: el.getAttribute('aria-label'),
                    href: el.getAttribute('href'),
                    class: el.getAttribute('class'),
                    id: el.getAttribute('id'),
                    tag: el.tagName
                };
            });
        ''', links)
        
        # Traiter tous les liens avec XPath optimis√©s
        results = []
        for i, (link, attrs) in enumerate(zip(links, batch_attrs)):
            try:
                # XPath g√©n√©r√© √† partir de la hi√©rarchie (tr√®s rapide)
                main_xpath, secondary_xpaths = self._get_xpath_hierarchical(link)
                
                # V√©rifications de non-conformit√©
                if not attrs['text'] or len(attrs['text'].strip()) < 3:
                    results.append({
                        "type": "Lien sans texte explicite",
                        "element": f"{attrs['tag']}#{attrs['id']}" if attrs['id'] else f"{attrs['tag']}.{attrs['class'].split()[0]}" if attrs['class'] else attrs['tag'],
                        "xpath": main_xpath,
                        "recommandation": "Ajouter un texte descriptif au lien ou un aria-label"
                    })
                
                if attrs['class'] and "btn--hide-txt" in attrs['class']:
                    results.append({
                        "type": "Lien avec texte masqu√©",
                        "element": f"{attrs['tag']}#{attrs['id']}" if attrs['id'] else f"{attrs['tag']}.{attrs['class'].split()[0]}" if attrs['class'] else attrs['tag'],
                        "xpath": main_xpath,
                        "recommandation": "S'assurer que le texte est accessible aux lecteurs d'√©cran via aria-label"
                    })
                    
            except Exception as e:
                self.logger.debug(f"Erreur lors de l'analyse du lien : {str(e)}")
                continue
        
        analysis_time = time.time() - start_time
        self.logger.info(f"‚è±Ô∏è Analyse hi√©rarchique des liens: {analysis_time:.2f}s ({len(links)} liens)")
        
        return results

    def _analyze_non_conformites(self, info, element_type, element):
        """Analyse les non-conformit√©s RGAA pour un √©l√©ment"""
        if element_type == "Image":
            # Crit√®re 1.3 - Images
            alt = info["Alt"]
            role = info["R√¥le"]
            if alt == "non d√©fini" and role != "presentation":
                self.non_conformites["images"].append({
                    "type": "Image sans alternative textuelle",
                    "element": info["S√©lecteur"],
                    "xpath": info["main_xpath"],
                    "recommandation": "Ajouter un attribut alt descriptif ou role='presentation' si l'image est d√©corative"
                })
            elif alt.endswith(('.jpg', '.png', '.svg')) and role != "presentation":
                self.non_conformites["images"].append({
                    "type": "Image avec nom de fichier comme alternative",
                    "element": info["S√©lecteur"],
                    "xpath": info["main_xpath"],
                    "recommandation": "Remplacer le nom de fichier par une description pertinente de l'image"
                })

        elif element_type.startswith("H"):
            # Crit√®re 9.1 - Titres
            if "sr-only" in info["S√©lecteur"]:
                self.non_conformites["titres"].append({
                    "type": "Titre masqu√© visuellement",
                    "element": info["S√©lecteur"],
                    "xpath": info["main_xpath"],
                    "recommandation": "V√©rifier que le titre est pertinent pour la structure du document"
                })

        elif element_type == "Nav":
            # Crit√®re 12.1 - Navigation
            aria_label = info["Aria-label"]
            if aria_label == "non d√©fini":
                self.non_conformites["navigation"].append({
                    "type": "Navigation sans label",
                    "element": info["S√©lecteur"],
                    "xpath": info["main_xpath"],
                    "recommandation": "Ajouter un aria-label descriptif √† la navigation"
                })

        # Analyse des r√¥les ARIA
        role = info["R√¥le"]
        if role != "non d√©fini":
            if role not in self.ARIA_ROLES_VALIDES:
                self.non_conformites["roles_aria"].append({
                    "type": f"R√¥le ARIA non valide : '{role}'",
                    "element": info["S√©lecteur"],
                    "xpath": info["main_xpath"],
                    "recommandation": f"Le r√¥le ARIA '{role}' n'est pas reconnu par la sp√©cification WAI-ARIA. Corrigez ou supprimez ce r√¥le."
                })
            elif role in self.ARIA_ROLES_DEPRECIES:
                self.non_conformites["roles_aria"].append({
                    "type": f"R√¥le ARIA d√©pr√©ci√© : '{role}'",
                    "element": info["S√©lecteur"],
                    "xpath": info["main_xpath"],
                    "recommandation": f"Le r√¥le ARIA '{role}' est d√©pr√©ci√© et ne doit plus √™tre utilis√©."
                })
        elif role == "non d√©fini" and element_type in ["Button", "Link", "Image", "Form"]:
            self.non_conformites["roles_aria"].append({
                "type": f"√âl√©ment {element_type} sans r√¥le ARIA",
                "element": info["S√©lecteur"],
                "xpath": info["main_xpath"],
                "recommandation": f"Ajouter un r√¥le ARIA appropri√© pour l'√©l√©ment {element_type}"
            })

    def _print_element_table(self, element, element_type):
        """Analyse un √©l√©ment et ajoute ses informations au rapport (version hi√©rarchique)"""
        try:
            info = self._get_element_info(element)
            main_xpath, secondary_xpaths = self._get_xpath_hierarchical(element)
            
            # Ajout des XPath dans le dictionnaire info
            info["main_xpath"] = main_xpath
            info["secondary_xpath1"] = secondary_xpaths[0] if len(secondary_xpaths) > 0 else ''
            info["secondary_xpath2"] = secondary_xpaths[1] if len(secondary_xpaths) > 1 else ''
            
            # G√©n√©ration de s√©lecteurs CSS alternatifs
            css_selectors = self.css_generator.generate_css_selectors(element)
            info["main_css"] = css_selectors["main_css"]
            info["secondary_css1"] = css_selectors["secondary_css1"]
            info["secondary_css2"] = css_selectors["secondary_css2"]
            
            # Construction de la ligne CSV avec nettoyage des champs
            row = [
                self._clean_csv_field(info["Type"]),
                self._clean_csv_field(info["S√©lecteur"]),
                self._clean_csv_field(info["Extrait HTML"]),
                self._clean_csv_field(info["R√¥le"]),
                self._clean_csv_field(info["Aria-label"]),
                self._clean_csv_field(info["Text"]),
                self._clean_csv_field(info["Alt"]),
                self._clean_csv_field(info["Title"]),
                self._clean_csv_field(info["Visible"]),
                self._clean_csv_field(info["Focusable"]),
                self._clean_csv_field(info["Id"]),
                self._clean_csv_field(info["main_xpath"]),
                self._clean_csv_field(info["secondary_xpath1"]),
                self._clean_csv_field(info["secondary_xpath2"]),
                # S√©lecteurs CSS alternatifs
                self._clean_csv_field(info["main_css"]),
                self._clean_csv_field(info["secondary_css1"]),
                self._clean_csv_field(info["secondary_css2"])
            ]
            self.csv_lines.append(';'.join(row))
            
            # Analyse des non-conformit√©s
            self._analyze_non_conformites(info, element_type, element)
            
            # Log des attributs ARIA en Markdown (uniquement si des attributs sont d√©finis)
            aria_attrs = {k: v for k, v in info.items() if k.startswith("Aria-") and v != "non d√©fini"}
            if aria_attrs:
                self.logger.info("### Attributs ARIA d√©finis")
                for attr, value in aria_attrs.items():
                    self.logger.debug(f"‚úì {attr}: {value}")
            
        except Exception as e:
            self.logger.error(f"Erreur lors de l'analyse de l'√©l√©ment {element_type}: {str(e)}")

    def _check_duplicate_ids(self):
        """V√©rifie l'unicit√© des attributs id dans la page"""
        id_map = defaultdict(list)
        # R√©cup√©rer tous les √©l√©ments avec un id
        elements = self.driver.find_elements(By.XPATH, '//*[@id]')
        for el in elements:
            eid = el.get_attribute('id')
            if eid:
                id_map[eid].append(el)
        # Chercher les ids dupliqu√©s
        for eid, els in id_map.items():
            if len(els) > 1:
                for el in els:
                    main_xpath, _ = self._get_xpath_hierarchical(el)
                    self.non_conformites["duplicate_id"].append({
                        "type": f"Attribut id dupliqu√© : '{eid}'",
                        "element": self._get_simple_selector(el),
                        "xpath": main_xpath,
                        "recommandation": f"L'attribut id '{eid}' doit √™tre unique dans la page."
                    })

    def _print_progress(self, current, total, prefix="", suffix="", length=50, fill="‚ñà"):
        """Affiche une barre de progression sur la m√™me ligne"""
        percent = f"{100 * (current / float(total)):.1f}"
        filled_length = int(length * current // total)
        bar = fill * filled_length + '-' * (length - filled_length)
        print(f'\r{prefix} |{bar}| {percent}% {suffix}', end='\r')
        if current == total:
            print()

    def generate_report(self):
        """G√©n√®re un rapport d√©taill√© des non-conformit√©s"""
        report = []
        report.append("# Rapport d'accessibilit√© RGAA (Version Hi√©rarchique)\n")
        
        for category, issues in self.non_conformites.items():
            if issues:
                report.append(f"\n## {category.upper()}\n")
                for issue in issues:
                    report.append(f"### {issue['type']}")
                    report.append(f"- **√âl√©ment**: `{issue['element']}`")
                    report.append(f"- **XPath**: `{issue['xpath']}`")
                    report.append(f"- **Recommandation**: {issue['recommandation']}\n")
        
        # √âcrire le rapport dans un fichier
        with open('reports/accessibility_report_hierarchical.md', 'w', encoding='utf-8') as f:
            f.write('\n'.join(report))

    def run(self):
        """Ex√©cute l'analyse d'accessibilit√© avec algorithme hi√©rarchique optimis√©"""
        import time
        start_time = time.time()
        
        # R√©initialiser le cache des XPath au d√©but de chaque analyse
        self._xpath_cache.clear()
        
        # Afficher l'URL de la page analys√©e en haut de l'analyse
        try:
            url = self.driver.current_url
            self.logger.info(f"\n**URL analys√©e** : {url}\n")
        except Exception:
            pass

        # En-t√™te CSV
        csv_header = [
            "Type", "S√©lecteur", "Extrait HTML", "R√¥le", "Aria-label", "Text", "Alt", "Title", "Visible", "Focusable", "Id", "X-path principal", "X-path secondaire 1", "X-path secondaire 2"
        ]
        self.csv_lines.append(';'.join(csv_header))
        
        # Log des sections en Markdown
        self.logger.info("## Analyse des √©l√©ments d'accessibilit√© (Version Hi√©rarchique)")
        self.logger.info("Cette section analyse les √©l√©ments cl√©s pour l'accessibilit√© selon les crit√®res RGAA :")
        self.logger.info("- Titres : Structure hi√©rarchique du contenu")
        self.logger.info("- Images : Alternatives textuelles et r√¥les")
        self.logger.info("- Liens : Textes explicites et attributs ARIA")
        self.logger.info("- Boutons : R√¥les et √©tats")
        self.logger.info("- Formulaires : Labels et attributs d'accessibilit√©")
        self.logger.info("- Landmarks : Structure s√©mantique de la page")
        self.logger.info("- Attributs ARIA : R√¥les et propri√©t√©s d'accessibilit√©\n")

        # R√©cup√©ration du DOM en une seule fois
        try:
            # ‚è±Ô∏è √âTAPE 1: Construction de la hi√©rarchie DOM
            step1_start = time.time()
            self._build_dom_hierarchy()
            step1_time = time.time() - step1_start
            self.logger.info(f"‚è±Ô∏è √âTAPE 1 - Construction hi√©rarchie: {step1_time:.2f}s")
            
            # ‚è±Ô∏è √âTAPE 2: Classification des √©l√©ments
            step2_start = time.time()
            self.logger.info("Phase 1 : Classification des √©l√©ments par type...")
            
            # R√©cup√©rer tous les √©l√©ments en une seule fois
            all_elements = self.driver.find_elements(By.XPATH, "//*")
            total_elements = len(all_elements)
            self.logger.info(f"Nombre total d'√©l√©ments HTML √† analyser : {total_elements}")
            
            # Cr√©er des dictionnaires pour stocker les √©l√©ments par type
            elements_by_type = {
                "headings": [],
                "images": [],
                "links": [],
                "buttons": [],
                "forms": [],
                "landmarks": [],
                "aria_roles": []
            }

            # Classer les √©l√©ments par type
            for i, element in enumerate(all_elements, 1):
                if i % 10 == 0:  # Mise √† jour plus fr√©quente de la barre de progression
                    self._print_progress(i, total_elements, prefix="Classification :", suffix=f"{i}/{total_elements}")
                
                tag_name = element.tag_name.lower()
                
                if tag_name.startswith('h') and tag_name[1:].isdigit():
                    elements_by_type["headings"].append(element)
                elif tag_name == 'img':
                    elements_by_type["images"].append(element)
                elif tag_name == 'a':
                    elements_by_type["links"].append(element)
                elif tag_name == 'button':
                    elements_by_type["buttons"].append(element)
                elif tag_name == 'form':
                    elements_by_type["forms"].append(element)
                elif tag_name in ['header', 'nav', 'main', 'aside', 'footer']:
                    elements_by_type["landmarks"].append(element)
                
                # V√©rifier les r√¥les ARIA
                role = element.get_attribute('role')
                if role:
                    elements_by_type["aria_roles"].append(element)

            step2_time = time.time() - step2_start
            print()  # Nouvelle ligne apr√®s la barre de progression
            self.logger.info(f"‚è±Ô∏è √âTAPE 2 - Classification: {step2_time:.2f}s")
            self.logger.info(f"üìä R√©sultats classification:")
            for category, elements in elements_by_type.items():
                self.logger.info(f"   - {category}: {len(elements)} √©l√©ments")
            
            # ‚è±Ô∏è √âTAPE 3: Analyse d√©taill√©e par cat√©gorie
            step3_start = time.time()
            self.logger.info("\nPhase 2 : Analyse d√©taill√©e des √©l√©ments par cat√©gorie...")
            
            # Analyser les √©l√©ments par cat√©gorie
            categories = [
                ("headings", "Titres", "Structure hi√©rarchique du contenu"),
                ("images", "Images", "Alternatives textuelles et r√¥les"),
                ("links", "Liens", "Textes explicites et attributs ARIA"),
                ("buttons", "Boutons", "R√¥les et √©tats"),
                ("forms", "Formulaires", "Labels et attributs d'accessibilit√©"),
                ("landmarks", "Landmarks", "Structure s√©mantique de la page"),
                ("aria_roles", "√âl√©ments avec r√¥les ARIA", "R√¥les et propri√©t√©s d'accessibilit√©")
            ]

            total_processed = 0
            category_times = {}
            
            for category_key, category_name, category_desc in categories:
                elements = elements_by_type[category_key]
                if elements:
                    category_start = time.time()
                    self.logger.info(f"\n### {category_name} ({len(elements)} √©l√©ments)")
                    self.logger.info(f"Description : {category_desc}")
                    
                    if category_key == "links":
                        # Analyse hi√©rarchique optimis√©e des liens
                        self.logger.info("Analyse hi√©rarchique optimis√©e des liens en cours...")
                        results = self._analyze_links_hierarchical(elements)
                        self.non_conformites["liens"].extend(results)
                        
                        # Traitement direct avec XPath optimis√©s
                        for i, element in enumerate(elements, 1):
                            self._print_progress(i, len(elements), prefix=f"Analyse {category_name}:", suffix=f"{i}/{len(elements)}")
                            self._print_element_table(element, category_name)
                            total_processed += 1
                    else:
                        # Analyse normale pour les autres cat√©gories
                        for i, element in enumerate(elements, 1):
                            self._print_progress(i, len(elements), prefix=f"Analyse {category_name}:", suffix=f"{i}/{len(elements)}")
                            self._print_element_table(element, category_name)
                            total_processed += 1
                    
                    category_time = time.time() - category_start
                    category_times[category_name] = category_time
                    self.logger.info(f"‚è±Ô∏è {category_name}: {category_time:.2f}s ({len(elements)} √©l√©ments)")
                    print()  # Nouvelle ligne apr√®s la barre de progression
            
            step3_time = time.time() - step3_start
            self.logger.info(f"‚è±Ô∏è √âTAPE 3 - Analyse d√©taill√©e: {step3_time:.2f}s")
            self.logger.info(f"üìä Temps par cat√©gorie:")
            for category, time_taken in category_times.items():
                self.logger.info(f"   - {category}: {time_taken:.2f}s")

            # ‚è±Ô∏è √âTAPE 4: V√©rification des identifiants uniques
            step4_start = time.time()
            self.logger.info("\nPhase 3 : V√©rification des identifiants uniques...")
            self._check_duplicate_ids()
            step4_time = time.time() - step4_start
            self.logger.info(f"‚è±Ô∏è √âTAPE 4 - V√©rification IDs: {step4_time:.2f}s")

        except Exception as e:
            self.logger.error(f"Erreur lors de l'analyse du DOM : {str(e)}")

        # ‚è±Ô∏è √âTAPE 5: G√©n√©ration des rapports
        step5_start = time.time()
        self.logger.info("\n‚è±Ô∏è √âTAPE 5 - G√©n√©ration des rapports...")
        
        # Cr√©er le r√©pertoire reports s'il n'existe pas
        os.makedirs('reports', exist_ok=True)
        
        # √âcrire le fichier CSV dans le r√©pertoire reports
        with open('reports/accessibility_analysis_hierarchical.csv', 'w', encoding='utf-8-sig') as f:
            f.write('\n'.join(self.csv_lines))

        # G√©n√©rer le rapport apr√®s l'analyse
        self.generate_report()
        step5_time = time.time() - step5_start
        self.logger.info(f"‚è±Ô∏è √âTAPE 5 - G√©n√©ration rapports: {step5_time:.2f}s")
        
        # üìä R√âSUM√â GLOBAL DES PERFORMANCES
        total_time = time.time() - start_time
        self.logger.info(f"\nüöÄ R√âSUM√â DES PERFORMANCES (VERSION HI√âRARCHIQUE):")
        self.logger.info(f"‚è±Ô∏è Temps total d'analyse: {total_time:.2f}s")
        self.logger.info(f"üìä √âl√©ments trait√©s: {total_processed}")
        if total_processed > 0:
            self.logger.info(f"‚ö° Vitesse moyenne: {total_processed/total_time:.1f} √©l√©ments/seconde")
        self.logger.info("\nProgression : Rapport g√©n√©r√© avec succ√®s (Version Hi√©rarchique).")
