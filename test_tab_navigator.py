#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test du module de navigation tabulaire
V√©rifie que les rapports sont g√©n√©r√©s avec les identifiants uniques (XPath)
"""

import sys
import os
import logging
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from modules.tab_navigator import TabNavigator
from utils.log_utils import setup_logger

def test_tab_navigator():
    """Test du module de navigation tabulaire"""
    
    # Configuration du logger
    logger = setup_logger(debug=True)
    
    # Configuration du navigateur
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--window-size=1920,1080')
    
    try:
        # Initialiser le driver
        driver = webdriver.Chrome(options=chrome_options)
        
        # Naviguer vers une page de test
        test_url = "https://www.example.com"
        logger.info(f"Navigation vers: {test_url}")
        driver.get(test_url)
        
        # Attendre que la page soit charg√©e
        driver.implicitly_wait(5)
        
        # Initialiser le navigateur tabulaire
        tab_navigator = TabNavigator(driver, logger, tab_delay=0.5)  # Test avec d√©lai de 0.5 seconde
        
        # Ex√©cuter l'analyse de navigation tabulaire
        logger.info("D√©marrage de l'analyse de navigation tabulaire...")
        results = tab_navigator.run()
        
        # V√©rifier les r√©sultats
        if results:
            logger.info(f"‚úÖ Analyse termin√©e avec succ√®s. {len(results)} √©l√©ments analys√©s.")
            
            # V√©rifier que les fichiers de rapport ont √©t√© cr√©√©s
            csv_file = "rapport_analyse_tab.csv"
            json_file = "rapport_analyse_tab.json"
            
            if os.path.exists(csv_file):
                logger.info(f"‚úÖ Fichier CSV cr√©√©: {csv_file}")
            else:
                logger.error(f"‚ùå Fichier CSV manquant: {csv_file}")
            
            if os.path.exists(json_file):
                logger.info(f"‚úÖ Fichier JSON cr√©√©: {json_file}")
            else:
                logger.error(f"‚ùå Fichier JSON manquant: {json_file}")
            
            # Afficher quelques exemples d'√©l√©ments avec leurs XPath
            logger.info("\nüìã Exemples d'√©l√©ments captur√©s:")
            for i, result in enumerate(results[:5]):  # Afficher les 5 premiers
                logger.info(f"  {i+1}. {result['tag']} - XPath: {result['xpath']}")
                if result['accessible_name']['name']:
                    logger.info(f"     Nom accessible: {result['accessible_name']['name']}")
                else:
                    logger.info(f"     Aucun nom accessible")
            
            # V√©rifier la pr√©sence des identifiants uniques
            elements_with_xpath = [r for r in results if r['xpath'] and r['xpath'] != 'unknown']
            logger.info(f"\nüîó √âl√©ments avec XPath unique: {len(elements_with_xpath)}/{len(results)}")
            
            # V√©rifier les noms accessibles
            elements_with_accessible_name = [r for r in results if r['accessible_name']['name']]
            logger.info(f"üìù √âl√©ments avec nom accessible: {len(elements_with_accessible_name)}/{len(results)}")
            
        else:
            logger.warning("‚ö†Ô∏è Aucun √©l√©ment captur√© lors de l'analyse")
        
        # Fermer le driver
        driver.quit()
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test: {str(e)}")
        return False
    
    return True

if __name__ == "__main__":
    print("üß™ Test du module de navigation tabulaire")
    print("=" * 50)
    
    success = test_tab_navigator()
    
    if success:
        print("\n‚úÖ Test r√©ussi !")
        print("üìÅ V√©rifiez les fichiers g√©n√©r√©s:")
        print("   - rapport_analyse_tab.csv")
        print("   - rapport_analyse_tab.json")
        print("   - reports/focus_screenshots/ (captures d'√©cran)")
    else:
        print("\n‚ùå Test √©chou√© !")
        sys.exit(1) 