from modules.contrast_checker import ContrastChecker
from modules.color_simulator import ColorSimulator
from modules.tab_navigator import TabNavigator
from modules.enhanced_tab_navigator import EnhancedTabNavigator
from modules.screen_reader import ScreenReader
from modules.enhanced_screen_reader import EnhancedScreenReader
from modules.hierarchical_screen_reader import HierarchicalScreenReader
from modules.image_analyzer import ImageAnalyzer
from modules.navigation import NavigationModule
from utils.log_utils import setup_logger
from core.shared_data import SharedData

class OrderedAccessibilityCrawler:
    def __init__(self, config, use_hierarchy=False):
        self.config = config
        self.driver = None
        self.logger = setup_logger()
        self.shared_data = SharedData()
        self.use_hierarchy = use_hierarchy
        self.css_marker = None
        
        # D√©finir l'ordre d'ex√©cution optimal
        self.execution_order = {
            'screen_reader': 1,      # DOIT √™tre en premier pour collecter les donn√©es ARIA
            'tab_navigation': 2,     # DOIT √™tre en second pour utiliser les donn√©es ARIA
            'contrast': 3,           # Peut s'ex√©cuter en parall√®le
            'daltonism': 3,          # Peut s'ex√©cuter en parall√®le
            'image_analyzer': 3,     # Peut s'ex√©cuter en parall√®le
            'navigation': 3,        # Peut s'ex√©cuter en parall√®le
            'dom_analyzer': 4       # En dernier car il analyse tout le DOM
        }
        
        self.modules_by_priority = {}

    def _load_modules(self):
        """Charge les modules dans l'ordre optimal"""
        enabled_modules = self.config.get_enabled_modules()
        self.logger.info(f"Modules activ√©s d√©tect√©s: {enabled_modules}")
        
        # Phase 1: ScreenReader (collecte des donn√©es ARIA)
        if 'screen_reader' in enabled_modules:
            if self.use_hierarchy:
                screen_reader = HierarchicalScreenReader(self.driver, self.logger, enable_css_marking=self.css_marker is not None)
                self.logger.info("‚úì HierarchicalScreenReader charg√© (Phase 1 - Collecte des donn√©es ARIA avec algorithme hi√©rarchique)")
            else:
                screen_reader = EnhancedScreenReader(self.driver, self.logger, enable_css_marking=self.css_marker is not None)
                self.logger.info("‚úì EnhancedScreenReader charg√© (Phase 1 - Collecte des donn√©es ARIA)")
            
            screen_reader.shared_data = self.shared_data
            if self.css_marker:
                screen_reader.css_marker = self.css_marker
                if self.use_hierarchy:
                    self.logger.info("üé® CSSMarker configur√© pour HierarchicalScreenReader")
                else:
                    self.logger.info("üé® CSSMarker configur√© pour EnhancedScreenReader")
                self.logger.debug(f"CSSMarker instance: {self.css_marker}")
                self.logger.debug(f"ScreenReader CSSMarker: {screen_reader.css_marker}")
            self.modules_by_priority[1] = [screen_reader]
        
        # Phase 2: TabNavigator (utilise les donn√©es ARIA)
        if 'tab_navigation' in enabled_modules:
            tab_navigator = EnhancedTabNavigator(
                self.driver, 
                self.logger, 
                self.config.get_max_screenshots(),
                self.shared_data
            )
            if 2 not in self.modules_by_priority:
                self.modules_by_priority[2] = []
            self.modules_by_priority[2].append(tab_navigator)
            self.logger.info("‚úì TabNavigator charg√© (Phase 2 - Utilisation des donn√©es ARIA)")
        
        # Phase 3: Modules parall√®les (peuvent s'ex√©cuter en m√™me temps)
        phase_3_modules = []
        
        if 'contrast' in enabled_modules:
            phase_3_modules.append(ContrastChecker(self.driver, self.logger))
            self.logger.info("‚úì ContrastChecker charg√© (Phase 3)")
            
        if 'daltonism' in enabled_modules:
            phase_3_modules.append(ColorSimulator(self.driver, self.logger))
            self.logger.info("‚úì ColorSimulator charg√© (Phase 3)")
            
        if 'image_analyzer' in enabled_modules:
            phase_3_modules.append(ImageAnalyzer(
                self.driver, 
                self.logger, 
                self.config.base_url, 
                self.config.output_dir
            ))
            self.logger.info("‚úì ImageAnalyzer charg√© (Phase 3)")
            
        if 'navigation' in enabled_modules:
            phase_3_modules.append(NavigationModule(self.driver, self.logger))
            self.logger.info("‚úì NavigationModule charg√© (Phase 3)")
        
        if phase_3_modules:
            self.modules_by_priority[3] = phase_3_modules
        
        # Phase 4: DOM Analyzer (en dernier)
        if 'dom' in enabled_modules:
            from modules.dom_analyzer import DOMAnalyzer
            dom_analyzer = DOMAnalyzer(self.driver, self.logger, enable_css_marking=self.css_marker is not None)
            if self.css_marker:
                dom_analyzer.css_marker = self.css_marker
            self.modules_by_priority[4] = [dom_analyzer]
            self.logger.info("‚úì DOMAnalyzer charg√© (Phase 4)")

    def crawl(self, export_csv=False, csv_filename=None):
        """Ex√©cute les modules dans l'ordre optimal"""
        if self.driver is None:
            raise ValueError("Le driver n'est pas initialis√©.")
        
        self.logger.info("\nüöÄ D√©marrage de l'analyse d'accessibilit√© avec ordre optimis√©")
        self.logger.info("=" * 60)
        
        # Ex√©cuter les modules par phase dans l'ordre
        for phase in sorted(self.modules_by_priority.keys()):
            modules = self.modules_by_priority[phase]
            
            if phase == 1:
                self.logger.info(f"\nüìä PHASE {phase}: COLLECTE DES DONN√âES ARIA")
                self.logger.info("Collecte des donn√©es ARIA de tous les √©l√©ments de la page...")
                
            elif phase == 2:
                self.logger.info(f"\nüéØ PHASE {phase}: NAVIGATION TABULAIRE AVEC DONN√âES ARIA")
                self.logger.info("Navigation au clavier avec analyse ARIA enrichie...")
                
            elif phase == 3:
                self.logger.info(f"\n‚ö° PHASE {phase}: ANALYSES PARALL√àLES")
                self.logger.info("Ex√©cution des autres modules d'analyse...")
                
            elif phase == 4:
                self.logger.info(f"\nüîç PHASE {phase}: ANALYSE DOM COMPL√àTE")
                self.logger.info("Analyse finale de la structure DOM...")
            
            # Ex√©cuter les modules de cette phase
            for module in modules:
                try:
                    module_name = module.__class__.__name__
                    self.logger.info(f"\n‚ñ∂Ô∏è  Ex√©cution de {module_name}...")
                    
                    # Ex√©cuter le module
                    result = module.run()
                    
                    # Si c'est le ScreenReader, extraire les donn√©es ARIA
                    if isinstance(module, EnhancedScreenReader):
                        self._extract_aria_data_from_screen_reader(module)
                        self.logger.info(f"‚úÖ {module_name} termin√© - Donn√©es ARIA collect√©es")
                    else:
                        self.logger.info(f"‚úÖ {module_name} termin√©")
                        
                except Exception as e:
                    self.logger.error(f"‚ùå Erreur dans {module_name}: {str(e)}")
                    continue
            
            # Afficher le statut des donn√©es partag√©es apr√®s chaque phase
            if phase >= 2:  # Apr√®s la phase 1 (ScreenReader)
                aria_count = len(self.shared_data.aria_data)
                self.logger.info(f"üìà Donn√©es ARIA disponibles: {aria_count} √©l√©ments")
        
        self.logger.info("\nüéâ Analyse termin√©e avec succ√®s !")
        self.logger.info("=" * 60)
        
        # G√©n√©rer le rapport final avec export CSV si demand√©
        self.generate_report(export_csv, csv_filename)

    def _extract_aria_data_from_screen_reader(self, screen_reader):
        """Extrait les donn√©es ARIA du ScreenReader"""
        try:
            # R√©cup√©rer toutes les donn√©es ARIA collect√©es
            aria_data = screen_reader.get_all_aria_data()
            
            if aria_data:
                self.logger.info(f"üì• Extraction de {len(aria_data)} √©l√©ments avec donn√©es ARIA...")
                
                # Stocker les donn√©es dans le syst√®me de partage
                for element_id, data in aria_data.items():
                    self.shared_data.add_aria_data(element_id, data)
                
                self.logger.info(f"‚úÖ {len(aria_data)} √©l√©ments ARIA stock√©s dans les donn√©es partag√©es")
            else:
                self.logger.warning("‚ö†Ô∏è  Aucune donn√©e ARIA trouv√©e par le ScreenReader")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur lors de l'extraction des donn√©es ARIA: {e}")

    def generate_report(self, export_csv=False, csv_filename=None):
        """G√©n√®re le rapport final"""
        self.logger.info("\nüìã G√©n√©ration du rapport d'analyse...")
        
        # Statistiques des donn√©es partag√©es
        aria_count = len(self.shared_data.aria_data)
        focusable_count = len(self.shared_data.focusable_elements)
        
        self.logger.info(f"üìä Statistiques finales:")
        self.logger.info(f"   - √âl√©ments avec donn√©es ARIA: {aria_count}")
        self.logger.info(f"   - √âl√©ments focusables: {focusable_count}")
        
        # Export CSV si demand√©
        if export_csv:
            try:
                from utils.csv_exporter import CSVExporter
                exporter = CSVExporter()
                
                if aria_count > 0 or focusable_count > 0:
                    filepath = exporter.export_complete_data(self.shared_data, csv_filename)
                    self.logger.info(f"üìÑ Donn√©es export√©es en CSV: {filepath}")
                else:
                    self.logger.warning("‚ö†Ô∏è  Aucune donn√©e √† exporter en CSV")
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erreur lors de l'export CSV: {e}")
        
        self.logger.info("‚úÖ Rapport g√©n√©r√© avec succ√®s.")

    def set_driver(self, driver):
        """Initialise le driver et charge les modules"""
        self.driver = driver
        self._load_modules()

    def get_shared_data(self):
        """Retourne les donn√©es partag√©es"""
        return self.shared_data

    def get_execution_summary(self):
        """Retourne un r√©sum√© de l'ordre d'ex√©cution"""
        summary = []
        for phase in sorted(self.modules_by_priority.keys()):
            modules = self.modules_by_priority[phase]
            module_names = [m.__class__.__name__ for m in modules]
            summary.append(f"Phase {phase}: {', '.join(module_names)}")
        return summary
    
    def set_css_marker(self, css_marker):
        """D√©finit le CSSMarker pour le crawler"""
        self.css_marker = css_marker
        if self.css_marker:
            self.logger.info("üé® CSSMarker configur√© pour le crawler")
