#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'ordre d'ex√©cution des modules
"""

from core.config import Config
from core.execution_config import ExecutionConfig

def test_execution_order():
    """Teste l'ordre d'ex√©cution avec les modules tab et screen"""
    
    # Cr√©er une configuration avec les modules tab et screen
    config = Config()
    config.set_modules(24)  # 8 (tab) + 16 (screen) = 24
    
    # R√©cup√©rer les modules activ√©s
    enabled_modules = config.get_enabled_modules()
    print(f"Modules activ√©s: {enabled_modules}")
    
    # Valider le plan d'ex√©cution
    execution_plan = ExecutionConfig.get_execution_plan(enabled_modules)
    
    if not execution_plan['valid']:
        print(f"‚ùå Erreur: {execution_plan['error']}")
        return False
    
    print("‚úÖ Plan d'ex√©cution valid√©:")
    print(f"   - Phases d'ex√©cution: {execution_plan['total_phases']}")
    print(f"   - Temps estim√©: {execution_plan['estimated_time']} secondes")
    
    print("\nüìã Ordre d'ex√©cution:")
    for phase, modules in execution_plan['execution_order'].items():
        print(f"   Phase {phase}: {', '.join(modules)}")
    
    # V√©rifier que screen_reader est en phase 1
    if 1 in execution_plan['execution_order']:
        phase_1_modules = execution_plan['execution_order'][1]
        if 'screen_reader' in phase_1_modules:
            print("‚úÖ ScreenReader est bien en Phase 1")
        else:
            print("‚ùå ScreenReader n'est pas en Phase 1")
            return False
    else:
        print("‚ùå Aucune Phase 1 trouv√©e")
        return False
    
    # V√©rifier que tab_navigation est en phase 2
    if 2 in execution_plan['execution_order']:
        phase_2_modules = execution_plan['execution_order'][2]
        if 'tab_navigation' in phase_2_modules:
            print("‚úÖ TabNavigator est bien en Phase 2")
        else:
            print("‚ùå TabNavigator n'est pas en Phase 2")
            return False
    else:
        print("‚ùå Aucune Phase 2 trouv√©e")
        return False
    
    print("\nüéâ Test r√©ussi ! L'ordre d'ex√©cution est correct.")
    return True

if __name__ == "__main__":
    test_execution_order()
