#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de d√©monstration pour l'interface graphique RGAA Web Checker
Ce script lance l'interface avec des donn√©es d'exemple pour tester les fonctionnalit√©s
"""

import tkinter as tk
from tkinter import messagebox
import sys
import os

def show_demo_info():
    """Affiche les informations de d√©monstration"""
    info = """
    üéØ D√âMONSTRATION - RGAA Web Checker Interface Graphique
    
    Cette d√©monstration vous permet de tester l'interface graphique
    avec des donn√©es d'exemple sans effectuer de vraie analyse.
    
    üìã Fonctionnalit√©s √† tester :
    
    1. Configuration de l'analyse
       - Saisie d'URL
       - S√©lection des modules
       - Options avanc√©es
    
    2. Interface des r√©sultats
       - Statistiques
       - Tableau d√©taill√©
       - Export CSV/JSON
    
    3. Visualisation des images
       - Navigation entre images
       - Zoom et d√©filement
    
    4. Gestion des logs
       - Logs en temps r√©el
       - Sauvegarde
    
    üöÄ Pour tester avec de vraies donn√©es :
    - Saisissez une URL r√©elle
    - Cliquez sur "D√©marrer l'analyse"
    
    ‚ö†Ô∏è  Note : Cette d√©monstration utilise des donn√©es fictives
    """
    
    root = tk.Tk()
    root.withdraw()
    messagebox.showinfo("D√©monstration RGAA Web Checker", info)
    root.destroy()

def create_demo_data():
    """Cr√©e des donn√©es de d√©monstration"""
    demo_results = {
        'contrast': [
            {
                'type': 'Contraste insuffisant',
                'message': 'Le texte "Bienvenue" a un ratio de contraste de 2.1 (minimum requis: 4.5)',
                'severity': 'high'
            },
            {
                'type': 'Contraste insuffisant',
                'message': 'Le lien "En savoir plus" a un ratio de contraste de 3.2 (minimum requis: 4.5)',
                'severity': 'medium'
            }
        ],
        'dom': [
            {
                'type': 'Attribut manquant',
                'message': 'L\'image "logo.png" n\'a pas d\'attribut alt',
                'severity': 'critical'
            },
            {
                'type': 'R√¥le ARIA invalide',
                'message': 'L\'√©l√©ment div a un r√¥le "button" mais n\'est pas focusable',
                'severity': 'medium'
            }
        ],
        'image': [
            {
                'type': 'Image sans alt',
                'message': 'Image "banner.jpg" sans texte alternatif',
                'severity': 'critical'
            },
            {
                'type': 'Image d√©corative',
                'message': 'Image "decoration.png" devrait avoir alt=""',
                'severity': 'low'
            }
        ],
        'screen': [
            {
                'type': 'Titre manquant',
                'message': 'La page n\'a pas de titre principal (h1)',
                'severity': 'high'
            },
            {
                'type': 'Landmark manquant',
                'message': 'Aucun landmark "main" trouv√© sur la page',
                'severity': 'medium'
            }
        ],
        'tab': [
            {
                'type': 'Ordre de tabulation',
                'message': 'L\'ordre de tabulation n\'est pas logique',
                'severity': 'medium'
            }
        ]
    }
    
    return demo_results

def main():
    """Fonction principale de d√©monstration"""
    print("üéØ RGAA Web Checker - D√©monstration Interface Graphique")
    print("=" * 60)
    
    # Afficher les informations de d√©monstration
    show_demo_info()
    
    # V√©rifier que l'interface graphique existe
    if not os.path.exists('gui_app.py'):
        print("‚ùå Erreur: gui_app.py non trouv√©")
        print("Assurez-vous d'√™tre dans le r√©pertoire racine de l'application")
        return 1
    
    # V√©rifier les d√©pendances
    try:
        import tkinter
        print("‚úÖ Tkinter disponible")
    except ImportError:
        print("‚ùå Tkinter non disponible")
        print("Installer: sudo apt install python3-tk (Ubuntu/Linux)")
        return 1
    
    try:
        from PIL import Image
        print("‚úÖ Pillow (PIL) disponible")
    except ImportError:
        print("‚ùå Pillow (PIL) non disponible")
        print("Installer: pip install Pillow")
        return 1
    
    print("‚úÖ Toutes les d√©pendances sont disponibles")
    print("üöÄ Lancement de l'interface graphique...")
    
    try:
        # Importer et lancer l'interface graphique
        from gui_app import main as gui_main
        
        # Modifier temporairement la classe pour ajouter des donn√©es de d√©monstration
        import gui_app
        
        # Sauvegarder la m√©thode originale
        original_process_results = gui_app.RGAAWebCheckerGUI.process_results
        
        def demo_process_results(self, results):
            """Version de d√©monstration qui utilise des donn√©es fictives"""
            demo_data = create_demo_data()
            original_process_results(self, demo_data)
            
            # Ajouter un message de d√©monstration
            self.update_logs("üéØ MODE D√âMONSTRATION - Donn√©es fictives utilis√©es")
            self.update_logs("Pour une vraie analyse, saisissez une URL et cliquez sur 'D√©marrer l'analyse'")
        
        # Remplacer temporairement la m√©thode
        gui_app.RGAAWebCheckerGUI.process_results = demo_process_results
        
        # Lancer l'interface
        gui_main()
        
        return 0
        
    except Exception as e:
        print(f"‚ùå Erreur lors du lancement: {str(e)}")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 