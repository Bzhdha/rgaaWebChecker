#!/bin/bash

# Configuration du logging
LOG_FILE="install.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# Fonction de logging
log_message() {
    echo "[$TIMESTAMP] $1" | tee -a "$LOG_FILE"
}

# Fonction pour gÃ©rer les erreurs
handle_error() {
    log_message "ERREUR: $1"
    log_message "Le script s'est arrÃªtÃ© Ã  cause d'une erreur."
    log_message "Consultez le fichier $LOG_FILE pour plus de dÃ©tails."
    echo ""
    echo "Appuyez sur une touche pour fermer cette fenÃªtre..."
    read -n 1 -s
    exit 1
}

# Rediriger les erreurs vers le log
exec 2>> "$LOG_FILE"

# DÃ©marrer le logging
log_message "=== DÃ©but de l'activation de l'environnement virtuel ==="

# VÃ©rifier si python3-venv est installÃ©
log_message "VÃ©rification de python3-venv..."
if ! python3 -c "import venv" 2>/dev/null; then
    log_message "ERREUR: Le package python3-venv n'est pas installÃ©."
    log_message "Installation automatique des prÃ©requis..."
    
    # DÃ©tecter la version de Python
    PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1,2)
    log_message "Version Python dÃ©tectÃ©e: $PYTHON_VERSION"
    
    # Installer le bon package selon la version
    if command -v apt &> /dev/null; then
        log_message "Installation de python3-venv via apt..."
        if ! sudo apt update 2>&1 | tee -a "$LOG_FILE"; then
            handle_error "Ã‰chec de la mise Ã  jour des paquets"
        fi
        
        # Essayer d'abord la version spÃ©cifique, puis la version gÃ©nÃ©rique
        if ! sudo apt install -y "python3-${PYTHON_VERSION}-venv" 2>&1 | tee -a "$LOG_FILE"; then
            log_message "Ã‰chec avec la version spÃ©cifique, tentative avec python3-venv..."
            if ! sudo apt install -y python3-venv 2>&1 | tee -a "$LOG_FILE"; then
                handle_error "Impossible d'installer python3-venv. Veuillez exÃ©cuter manuellement : sudo apt install python3-venv"
            fi
        fi
    else
        handle_error "Le package python3-venv n'est pas installÃ© et apt n'est pas disponible. Veuillez l'installer manuellement."
    fi
fi

# VÃ©rifier si l'environnement virtuel existe
if [ ! -d "venv" ]; then
    log_message "L'environnement virtuel n'existe pas. CrÃ©ation en cours..."
    
    # CrÃ©er l'environnement virtuel et capturer la sortie
    CREATE_OUTPUT=$(python3 -m venv venv 2>&1)
    CREATE_EXIT_CODE=$?
    
    # Log de la sortie
    log_message "Sortie de la crÃ©ation: $CREATE_OUTPUT"
    
    if [ $CREATE_EXIT_CODE -ne 0 ]; then
        handle_error "La crÃ©ation de l'environnement virtuel a Ã©chouÃ©. Sortie: $CREATE_OUTPUT"
    fi
    
    # VÃ©rifier si la crÃ©ation a vraiment rÃ©ussi
    if [ ! -d "venv/bin" ] || [ ! -f "venv/bin/activate" ]; then
        handle_error "La crÃ©ation de l'environnement virtuel semble avoir Ã©chouÃ©. Le dossier venv/bin n'existe pas."
    fi
    log_message "Environnement virtuel crÃ©Ã© avec succÃ¨s"
else
    log_message "Environnement virtuel existant dÃ©tectÃ©"
fi

# Activer l'environnement virtuel
log_message "Activation de l'environnement virtuel..."
if [ ! -f "venv/bin/activate" ]; then
    handle_error "Le fichier d'activation venv/bin/activate n'existe pas. L'environnement virtuel n'a pas Ã©tÃ© crÃ©Ã© correctement."
fi

# Activer l'environnement virtuel
source venv/bin/activate
if [ -z "$VIRTUAL_ENV" ]; then
    handle_error "L'activation de l'environnement virtuel a Ã©chouÃ©. VIRTUAL_ENV n'est pas dÃ©fini."
fi
log_message "Environnement virtuel activÃ© avec succÃ¨s: $VIRTUAL_ENV"

# VÃ©rifier si les dÃ©pendances sont installÃ©es
if [ ! -f "venv/.dependencies_installed" ]; then
    log_message "Installation des dÃ©pendances..."
    
    # Mettre Ã  jour pip
    log_message "Mise Ã  jour de pip..."
    if ! pip install --upgrade pip 2>&1 | tee -a "$LOG_FILE"; then
        log_message "ATTENTION: Ã‰chec de la mise Ã  jour de pip, continuation..."
    fi
    
    # Installer les dÃ©pendances
    log_message "Installation des dÃ©pendances depuis requirements.txt..."
    if pip install -r requirements.txt 2>&1 | tee -a "$LOG_FILE"; then
        touch venv/.dependencies_installed
        log_message "DÃ©pendances installÃ©es avec succÃ¨s !"
    else
        log_message "ERREUR: Ã‰chec de l'installation des dÃ©pendances"
        log_message "Tentative d'installation package par package..."
        
        # Installation package par package
        packages=(
            "selenium==4.18.1"
            "webdriver-manager==4.0.1"
            "Pillow==9.5.0"
            "markdown==3.5.2"
            "beautifulsoup4==4.12.3"
            "requests==2.31.0"
            "lxml==4.9.3"
            "pdfkit==1.0.0"
        )
        
        success=true
        for package in "${packages[@]}"; do
            log_message "Installation de $package..."
            if pip install "$package" 2>&1 | tee -a "$LOG_FILE"; then
                log_message "âœ“ $package installÃ© avec succÃ¨s"
            else
                log_message "âœ— Ã‰chec de l'installation de $package"
                success=false
            fi
        done
        
        if [ "$success" = true ]; then
            touch venv/.dependencies_installed
            log_message "Toutes les dÃ©pendances installÃ©es avec succÃ¨s !"
        else
            handle_error "Certaines dÃ©pendances n'ont pas pu Ãªtre installÃ©es. Consultez $LOG_FILE pour plus de dÃ©tails. Veuillez exÃ©cuter le script d'installation Ubuntu : chmod +x install_ubuntu.sh && ./install_ubuntu.sh"
        fi
    fi
else
    log_message "DÃ©pendances dÃ©jÃ  installÃ©es"
fi

log_message "=== Activation terminÃ©e avec succÃ¨s ==="
echo ""
echo "âœ… Environnement virtuel activÃ© !"
echo "ğŸ“‹ Logs disponibles dans : $LOG_FILE"
echo "ğŸšª Pour le dÃ©sactiver, utilisez : ./deactivate_venv.sh"
echo ""
echo "Appuyez sur une touche pour continuer..."
read -n 1 -s 